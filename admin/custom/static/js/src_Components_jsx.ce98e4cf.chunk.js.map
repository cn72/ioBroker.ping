{"version":3,"file":"static/js/src_Components_jsx.ce98e4cf.chunk.js","mappings":"2qBAcA,SAASA,EAAcC,EAAS,CAE5B,MAAMC,EAAUD,EAAQ,MAAM,GAAG,EAAE,IAAIE,GAAK,SAASA,EAAG,EAAE,EAAE,SAAS,CAAC,CAAC,EACvE,GAAID,EAAQ,SAAW,EACnB,MAAO,GAEX,MAAME,EAAYF,EAAQ,KAAK,EAAE,EAAE,MAAM,GAAG,EAAE,OAAS,EAEvD,OAAO,KAAK,IAAI,EAAG,GAAKE,CAAS,CACrC,CAEA,MAAMC,UAA4B,eAAc,CAC5C,YAAYC,EAAO,CACf,MAAMA,CAAK,EA0Ff,wBAAiB,CAACC,EAAIC,IAAU,CAC5B,GAAID,EAAG,SAAS,QAAQ,EAAG,CACvB,MAAME,EAAQD,EAAQA,EAAM,IAAM,GAC9BC,IAAU,KAAK,MAAM,OACrB,KAAK,SAAS,CAAC,MAAAA,CAAK,CAAC,CAE7B,SAAWF,EAAG,SAAS,WAAW,EAAG,CACjC,MAAMG,EAAWF,EAAQA,EAAM,IAAM,EACjCE,IAAa,KAAK,MAAM,UACxB,KAAK,SAAS,CAAE,SAAAA,CAAS,CAAC,CAElC,SAAWH,EAAG,SAAS,UAAU,EAAG,CAChC,MAAMI,EAAU,CAAC,EAACH,GAAA,MAAAA,EAAO,KACrBG,IAAY,KAAK,MAAM,SACvB,KAAK,SAAS,CAAE,QAAAA,CAAQ,CAAC,CAEjC,SAAWJ,EAAG,SAAS,SAAS,EAAG,CAC/B,MAAMK,GAAMJ,GAAA,YAAAA,EAAO,MAAO,KACtBI,IAAQ,KAAK,UAAU,KAAK,MAAM,GAAG,GACrC,KAAK,SAAS,CAAE,IAAK,KAAK,MAAMA,CAAG,CAAE,CAAC,CAE9C,SAAWL,EAAG,SAAS,SAAS,EAAG,CAC/B,MAAMM,GAASL,GAAA,YAAAA,EAAO,MAAO,GACzBK,IAAW,KAAK,MAAM,QACtB,KAAK,SAAS,CAAE,OAAAA,CAAO,CAAC,CAEhC,SAAWN,EAAG,SAAS,aAAa,EAAG,CACnC,MAAMO,GAAaN,GAAA,YAAAA,EAAO,MAAO,GAC7BM,IAAe,KAAK,MAAM,YAC1B,KAAK,SAAS,CAAE,WAAAA,CAAW,CAAC,CAEpC,SAAWP,EAAG,SAAS,cAAc,EAAG,CACpC,MAAMQ,GAAcP,GAAA,YAAAA,EAAO,MAAO,GAC9BO,IAAgB,KAAK,MAAM,aAC3B,KAAK,SAAS,CAAE,YAAAA,CAAY,CAAC,CAErC,SAAWR,EAAG,SAAS,YAAY,EAAG,CAClC,MAAMS,GAAQR,GAAA,YAAAA,EAAO,MAAO,GACxBQ,GACAA,IAAU,KAAK,MAAM,WACrB,KAAK,MAAM,WAAW,KAAKC,GAAQA,EAAK,KAAOD,CAAK,GAEpD,KAAK,SAAS,CAAE,UAAWA,CAAM,CAAC,CAE1C,CACJ,CAAC,EAtIG,KAAK,MAAQ,CACT,MAAO,GACP,SAAU,EACV,UAAW,GACX,WAAY,CAAC,EACb,SAAU,CAAC,EACX,IAAK,CAAC,EACN,QAAS,GACT,OAAQ,EACZ,CACJ,CAEM,kBAAmB,gCAxC7B,QAyCQ,MAAME,EAAa,CAAC,EAEdC,EAAS,MAAM,KAAK,MAAM,OAAO,UAAU,uBAAuB,KAAK,MAAM,QAAQ,EAAE,EACvFC,EAAO,MAAM,KAAK,MAAM,OAAO,UAAU,eAAeD,EAAO,OAAO,IAAI,EAAE,EAClF,OAAI,KAAAC,GAAA,YAAAA,EAAM,SAAN,cAAc,WAAd,QAAwB,mBACxB,OAAO,KAAKA,EAAK,OAAO,SAAS,iBAAiB,EAAE,QAAQJ,GAAS,CACrDI,EAAK,OAAO,SAAS,kBAAkBJ,CAAK,EACpD,QAAQK,GAAQ,CACZA,EAAK,SAAW,QAAU,CAACA,EAAK,UAChCH,EAAW,KAAK,CACZ,KAAMF,EACN,GAAIK,EAAK,QACT,QAASA,EAAK,OAClB,CAAC,CAET,CAAC,CACL,CAAC,EAGEH,CACX,CAAC,CAAD,CAEM,mBAAoB,gCACtB,MAAM,mBAAM,0BAAN,IAAwB,EAC9B,MAAMI,EAAW,CAAC,EAEZd,EAAQ,MAAM,KAAK,MAAM,OAAO,SAAS,uBAAuB,KAAK,MAAM,QAAQ,QAAQ,EACjGc,EAAS,MAAQ,CAAC,EAACd,GAAA,MAAAA,EAAO,KAE1B,MAAMe,EAAY,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,mBAAmB,EAC3Fb,EAAW,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,kBAAkB,EACzFc,EAAS,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,iBAAiB,EACtFC,EAAS,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,gBAAgB,EACrFZ,EAAS,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,gBAAgB,EACrFC,EAAa,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,oBAAoB,EAC7FC,EAAc,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,qBAAqB,EAErGO,EAAS,QAAST,GAAA,YAAAA,EAAQ,MAAO,GACjCS,EAAS,UAAWZ,GAAA,YAAAA,EAAU,MAAO,EACrCY,EAAS,QAAU,CAAC,EAACE,GAAA,MAAAA,EAAQ,KAC7BF,EAAS,YAAaR,GAAA,YAAAA,EAAY,MAAO,GACzCQ,EAAS,aAAcP,GAAA,YAAAA,EAAa,MAAO,GAE3C,GAAI,CACAO,EAAS,IAAM,KAAK,MAAMG,GAAA,YAAAA,EAAQ,GAAG,GAAK,CAAC,EAEvCH,EAAS,IAAI,CAAC,GAAK,OAAOA,EAAS,KAAQ,WAC3CA,EAAS,IAAMA,EAAS,IAAI,IAAII,IAAO,CAAE,GAAAA,CAAG,EAAE,EAEtD,OAAQ,GACJJ,EAAS,IAAM,CAAC,CACpB,CAEA,MAAM,KAAK,MAAM,OAAO,eAAe,uBAAuB,KAAK,MAAM,QAAQ,SAAU,KAAK,cAAc,EAC9G,MAAM,KAAK,MAAM,OAAO,eAAe,QAAQ,KAAK,MAAM,QAAQ,YAAa,KAAK,cAAc,EAClGA,EAAS,WAAa,MAAM,KAAK,iBAAiB,EAC9CA,EAAS,WAAW,KAAKL,GAAQA,EAAK,MAAOM,GAAA,YAAAA,EAAW,IAAG,IAC3DD,EAAS,UAAYC,GAAA,YAAAA,EAAW,KAGpC,KAAK,SAASD,CAAQ,CAC1B,CAAC,CAAD,CAEA,QAAS,CACL,MAAMK,EAAO,KAAK,MAAM,WAAW,KAAKV,GAAQA,EAAK,KAAO,KAAK,MAAM,SAAS,EAChFU,EAAK,WAAa,KAAK,MAAM,WAC7BA,EAAK,YAAc,KAAK,MAAM,YAC9B,KAAK,MAAM,OAAO,OAAO,QAAQ,KAAK,MAAM,QAAQ,GAAI,uBAAwBA,CAAI,EAC/E,MAAMC,GAAS,QAAQ,MAAM,gBAAgBA,CAAK,EAAE,CAAC,CAC9D,CAEM,sBAAuB,gCACzB,MAAM,KAAK,MAAM,OAAO,iBAAiB,uBAAuB,KAAK,MAAM,QAAQ,SAAU,KAAK,cAAc,EAChH,MAAM,KAAK,MAAM,OAAO,iBAAiB,QAAQ,KAAK,MAAM,QAAQ,YAAa,KAAK,cAAc,CACxG,CAAC,CAAD,CAiDA,YAAa,CACT,GAAI,CAAC,KAAK,MAAM,WACZ,OAAO,kBAAC,iBAAc,MAG1B,MAAMC,EAAS,KAAK,MAAM,KAAK,SAAW,CAAC,EACrCC,EAAa,KAAK,MAAM,IAAI,OAAOC,GAAM,CAACF,EAAO,KAAKZ,GAAQA,EAAK,KAAOc,EAAG,EAAE,CAAC,EAChFC,EAAcF,EAAW,SAAW,KAAK,MAAM,SAAS,OACxDd,EAAQ,KAAK,MAAM,WAAW,KAAKC,GAAQA,EAAK,KAAO,KAAK,MAAM,SAAS,EACjF,IAAIgB,EAAM,EACNjB,IACAiB,EAAMjC,EAAcgB,EAAM,OAAO,GAGrC,MAAMkB,EAAS,kBAAC,UACZ,MAAO,CAAE,WAAYD,EAAM,IAAM,EAAI,GAAI,WAAY,SAAU,MAAO,GAAI,EAC1E,QAAQ,YACR,SAAU,CAAC,KAAK,MAAM,OAAS,CAAC,KAAK,MAAM,UAC3C,QAAS,IAAM,CACP,KAAK,MAAM,QACX,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,kBAAmB,EAAK,EAE9E,KAAK,OAAO,CAEpB,EACA,UAAW,kBAAC,SAAM,IAAC,GAEnB,kBAAC,QAAK,MAAO,CAAE,WAAY,CAAE,GAAI,KAAK,MAAM,QAAU,GAAG,KAAK,MAAM,MAAM,IAAI,OAAK,EAAE,kBAAkB,CAAC,GAAK,OAAK,EAAE,oBAAoB,CAAE,CAC9I,EAEA,OAAO,kBAAC,OAAI,MAAO,CAAE,MAAO,MAAM,EAAG,UAAU,eAC3C,kBAAC,UAAI,OAAK,EAAE,mBAAmB,CAAE,EACjC,kBAAC,OAAI,MAAO,CAAE,MAAO,OAAQ,QAAS,OAAQ,WAAY,QAAS,GAC/D,kBAAC,cAAW,CAAC,MAAO,CAAE,MAAO,OAAQ,SAAU,GAAI,EAAG,QAAQ,YAC1D,kBAAC,aAAU,KAAE,OAAK,EAAE,uBAAuB,CAAE,EAC7C,kBAAC,UACG,QAAQ,WACR,SAAU,KAAK,MAAM,QACrB,MAAO,KAAK,MAAM,UAClB,SAAU,GAAK,CACX,IAAInB,EAAa,GACbC,EAAc,GAClB,MAAMoB,EAAS,KAAK,MAAM,WAAW,KAAKlB,GAAQA,EAAK,KAAO,EAAE,OAAO,KAAK,EAC5E,GAAIkB,GAAUnC,EAAcmC,EAAO,OAAO,EAAI,IAAK,CAE/C,MAAMC,EAAQD,EAAO,GAAG,MAAM,GAAG,EACjCC,EAAM,CAAC,EAAI,IACXtB,EAAasB,EAAM,KAAK,GAAG,EAC3BrB,EAAc,GAClB,CACA,KAAK,SAAS,CAAE,UAAW,EAAE,OAAO,MAAO,WAAAD,EAAY,YAAAC,CAAY,EAAG,IAAY,wBAC9E,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,oBAAqB,KAAK,MAAM,SAAS,EACrG,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,qBAAsB,KAAK,MAAM,UAAU,EACvG,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,sBAAuB,KAAK,MAAM,WAAW,CAC7G,CAAC,EACL,GAEA,kBAAC,WAAQ,CAAC,MAAM,IACZ,kBAAC,UAAI,OAAK,EAAE,8BAA8B,CAAE,CAChD,EACC,KAAK,MAAM,WAAW,IAAIE,GAAQ,CAC/B,MAAMgB,EAAMjC,EAAciB,EAAK,OAAO,EACtC,OAAO,kBAAC,YACJ,IAAKA,EAAK,GACV,MAAOA,EAAK,IAEX,GAAGA,EAAK,IAAI,MAAMA,EAAK,EAAE,KAAKgB,CAAG,IAAI,OAAK,EAAE,iBAAiB,CAAC,GACnE,CACJ,CAAC,CACL,CACJ,EACCA,EAAM,IAAM,kBAAC,aACV,QAAQ,WACR,MAAO,CAAE,WAAY,EAAG,MAAO,GAAI,EACnC,MAAO,OAAK,EAAE,yBAAyB,EACvC,MAAO,KAAK,MAAM,WAClB,SAAU,GAAK,CACX,KAAK,SAAS,CAAE,WAAY,EAAE,OAAO,KAAM,EAAG,IAAY,wBACtD,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,qBAAsB,KAAK,MAAM,UAAU,CAC3G,CAAC,EACL,EACA,SAAU,KAAK,MAAM,QACzB,EAAK,KACJA,EAAM,IAAM,kBAAC,aACV,QAAQ,WACR,MAAO,CAAE,WAAY,EAAG,MAAO,GAAI,EACnC,MAAO,OAAK,EAAE,0BAA0B,EACxC,MAAO,KAAK,MAAM,YAClB,SAAU,GAAK,CACX,KAAK,SAAS,CAAE,YAAa,EAAE,OAAO,KAAM,EAAG,IAAY,wBACvD,MAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,sBAAuB,KAAK,MAAM,WAAW,CAC7G,CAAC,EACL,EACA,KAAK,SACL,UAAW,CAAE,UAAW,CAAE,IAAK,EAAG,IAAK,GAAI,CAAE,EAC7C,SAAU,KAAK,MAAM,QACzB,EAAK,KACJA,GAAO,IAAMC,EAAS,IAC3B,EACCD,EAAM,IAAM,kBAAC,OAAI,MAAO,CAAE,MAAO,OAAQ,UAAW,EAAG,GACnDC,CACL,EAAS,KACR,KAAK,MAAM,QAAU,kBAAC,kBACnB,MAAO,KAAK,MAAM,SAAW,IAAM,IACnC,QAAQ,cACR,MAAO,CAAE,UAAW,EAAG,EAC3B,EAAK,kBAAC,OAAI,MAAO,CAAE,OAAQ,EAAG,UAAW,EAAG,EAAG,EAC/C,kBAAC,UACG,QAAQ,YACR,MAAO,CAAE,UAAW,GAAI,aAAc,EAAG,EACzC,SAAU,CAAC,KAAK,MAAM,SAAS,OAC/B,QAAS,IAAM,CACX,MAAMG,EAAU,CAAC,GAAG,KAAK,MAAM,KAAK,OAAO,EAC3C,KAAK,MAAM,SAAS,QAAQX,GAAM,CACzBW,EAAQ,KAAKpB,GAAQA,EAAK,KAAOS,CAAE,GACpCW,EAAQ,KAAK,CAAE,GAAAX,EAAI,KAAMA,CAAG,CAAC,CAErC,CAAC,EACD,MAAMY,EAAO,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,IAAI,CAAC,EACvDA,EAAK,QAAUD,EACfA,EAAQ,KAAK,CAACE,EAAGC,IAAMD,EAAE,GAAKC,EAAE,GAAK,EAAKD,EAAE,GAAKC,EAAE,GAAK,GAAK,CAAE,EAC/D,KAAK,MAAM,SAASF,CAAI,EACxB,KAAK,SAAS,CAAE,SAAU,CAAC,CAAE,CAAC,CAClC,GAEC,OAAK,EAAE,iBAAiB,CAC7B,EACA,kBAAC,iBAAc,CAAC,UAAW,QAAO,MAAO,CAAE,MAAO,MAAO,GACrD,kBAAC,QAAK,CAAC,MAAO,CAAE,MAAO,MAAO,EAAG,KAAK,SAClC,kBAAC,YAAS,KACN,kBAAC,WAAQ,CAAC,MAAO,CAAE,WAAY,KAAK,MAAM,YAAc,OAAS,OAAS,MAAO,GAC7E,kBAAC,YAAS,CAAC,MAAO,CAAE,OAAQ,EAAG,GAC1BR,EAAW,OAAS,kBAAC,YAClB,MAAO,OAAK,EAAE,wBAAwB,EACtC,SAAU,CAACA,EAAW,OACtB,cAAe,CAACE,GAAe,KAAK,MAAM,SAAS,OACnD,QAASA,EACT,QAAS,IAAM,CACNA,EAGD,KAAK,SAAS,CAAE,SAAU,CAAC,CAAE,CAAC,EAF9B,KAAK,SAAS,CAAE,SAAUF,CAAW,CAAC,CAI9C,EACJ,EAAK,IACT,EACA,kBAAC,aACG,MAAO,CACH,QAAS,OACT,eAAgB,gBAChB,WAAY,SACZ,OAAQ,EACZ,GAEC,OAAK,EAAE,gBAAgB,CAC5B,EACA,kBAAC,YAAS,KAAE,OAAK,EAAE,iBAAiB,CAAE,EACtC,kBAAC,YAAS,KAAE,OAAK,EAAE,oBAAoB,CAAE,EACzC,kBAAC,YAAS,KAAE,OAAK,EAAE,oBAAoB,CAAE,CAC7C,CACJ,EACA,kBAAC,YAAS,KACL,KAAK,MAAM,IAAI,IAAIb,GAAQ,kBAAC,YACzB,IAAKA,EAAK,GACV,GAAI,CAAE,mCAAoC,CAAE,OAAQ,CAAE,CAAE,GAExD,kBAAC,YAAS,CAAC,UAAU,KAAK,MAAM,OAC1BY,EAAO,KAAKE,GAAMA,EAAG,KAAOd,EAAK,EAAE,EAahC,KAboC,kBAAC,YACtC,QAAS,KAAK,MAAM,SAAS,SAASA,EAAK,EAAE,EAC7C,MAAO,CAAE,QAAS,OAAQ,EAC1B,SAAU,IAAM,CACZ,MAAMwB,EAAW,KAAK,MAAM,SACtBC,EAAMD,EAAS,QAAQxB,EAAK,EAAE,EAChCyB,IAAQ,GACRD,EAAS,KAAKxB,EAAK,EAAE,EAErBwB,EAAS,OAAOC,EAAK,CAAC,EAE1B,KAAK,SAAS,CAAE,SAAAD,CAAS,CAAC,CAC9B,EACJ,CACJ,EACA,kBAAC,YAAS,KAAExB,EAAK,EAAG,EACpB,kBAAC,YAAS,KAAEA,EAAK,GAAI,EACrB,kBAAC,YAAS,KAAEA,EAAK,MAAO,EACxB,kBAAC,YAAS,KACJY,EAAO,KAAKE,GAAMA,EAAG,KAAOd,EAAK,EAAE,EAYhC,KAZoC,kBAAC,YACtC,QAASA,EAAK,OACd,MAAO,CAAE,QAAS,OAAQ,EAC1B,SAAU,IAAM,CACZ,MAAML,EAAM,CAAC,GAAG,KAAK,MAAM,GAAG,EACxB+B,EAAa/B,EAAI,KAAKmB,GAAMA,EAAG,KAAOd,EAAK,EAAE,EAC/C0B,IACAA,EAAW,OAAS,CAACA,EAAW,OAChC,KAAK,SAAS,CAAE,IAAA/B,CAAI,EAAG,IACnB,KAAK,MAAM,OAAO,SAAS,QAAQ,KAAK,MAAM,QAAQ,iBAAkB,KAAK,UAAUA,CAAG,EAAG,EAAK,CAAC,EAE/G,EACJ,CACJ,CACJ,CAAW,CACf,CACJ,CACJ,CACJ,CACJ,CACJ,CAEAP,EAAoB,UAAY,CAC5B,OAAQ,WAAiB,WACzB,UAAW,WACX,UAAW,WACX,MAAO,WACP,KAAM,WAAiB,WACvB,KAAM,WACN,OAAQ,WACR,QAAS,SACT,SAAU,QACd,EC5XA,QAAe,CAAE,oBD8XFA,CC9XsB,C","sources":["PingBrowseComponent.jsx","Components.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    LinearProgress, Table, TableBody,\n    TableCell, TableContainer, TableHead,\n    TableRow, Paper, Checkbox,\n    FormControl, InputLabel, Select, MenuItem,\n    Button, TextField,\n} from '@mui/material';\nimport { Search } from '@mui/icons-material';\nimport { I18n } from '@iobroker/adapter-react-v5';\nimport { ConfigGeneric } from '@iobroker/json-config';\n\nfunction netMask2Count(netmask) {\n     // Calculate the number of available IP addresses\n    const numbers = netmask.split('.').map(i => parseInt(i, 10).toString(2));\n    if (numbers.length !== 4) {\n        return 0;\n    }\n    const numOfOnes = numbers.join('').split('1').length - 1;\n\n    return Math.pow(2, 32 - numOfOnes);\n}\n\nclass PingBrowseComponent extends ConfigGeneric {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alive: false,\n            progress: 0,\n            interface: '',\n            interfaces: [],\n            selected: [],\n            ips: [],\n            running: false,\n            status: '',\n        };\n    }\n\n    async getAllInterfaces() {\n        const interfaces = [];\n        // read config of ping adapter\n        const config = await this.props.socket.getObject(`system.adapter.ping.${this.props.instance}`);\n        const host = await this.props.socket.getObject(`system.host.${config.common.host}`);\n        if (host?.native?.hardware?.networkInterfaces) {\n            Object.keys(host.native.hardware.networkInterfaces).forEach(iface => {\n                const ifc = host.native.hardware.networkInterfaces[iface];\n                ifc.forEach(addr => {\n                    if (addr.family === 'IPv4' && !addr.internal) {\n                        interfaces.push({\n                            name: iface,\n                            ip: addr.address,\n                            netmask: addr.netmask,\n                        });\n                    }\n                });\n            });\n        }\n\n        return interfaces;\n    }\n\n    async componentDidMount() {\n        await super.componentDidMount();\n        const newState = {};\n\n        const state = await this.props.socket.getState(`system.adapter.ping.${this.props.instance}.alive`);\n        newState.alive = !!state?.val;\n\n        const ifaceLast = await this.props.socket.getState(`ping.${this.props.instance}.browse.interface`);\n        const progress = await this.props.socket.getState(`ping.${this.props.instance}.browse.progress`);\n        const browse = await this.props.socket.getState(`ping.${this.props.instance}.browse.running`);\n        const result = await this.props.socket.getState(`ping.${this.props.instance}.browse.result`);\n        const status = await this.props.socket.getState(`ping.${this.props.instance}.browse.status`);\n        const rangeStart = await this.props.socket.getState(`ping.${this.props.instance}.browse.rangeStart`);\n        const rangeLength = await this.props.socket.getState(`ping.${this.props.instance}.browse.rangeLength`);\n\n        newState.status = status?.val || '';\n        newState.progress = progress?.val || 0;\n        newState.running = !!browse?.val;\n        newState.rangeStart = rangeStart?.val || '';\n        newState.rangeLength = rangeLength?.val || '';\n\n        try {\n            newState.ips = JSON.parse(result?.val) || [];\n            // convert an old format to [{ip: 'address}]\n            if (newState.ips[0] && typeof newState.ips === 'string') {\n                newState.ips = newState.ips.map(ip => ({ ip }));\n            }\n        } catch {\n            newState.ips = [];\n        }\n\n        await this.props.socket.subscribeState(`system.adapter.ping.${this.props.instance}.alive`, this.onChangedState);\n        await this.props.socket.subscribeState(`ping.${this.props.instance}.browse.*`, this.onChangedState);\n        newState.interfaces = await this.getAllInterfaces();\n        if (newState.interfaces.find(item => item.ip === ifaceLast?.val)) {\n            newState.interface = ifaceLast?.val;\n        }\n\n        this.setState(newState);\n    }\n\n    browse() {\n        const intr = this.state.interfaces.find(item => item.ip === this.state.interface);\n        intr.rangeStart = this.state.rangeStart;\n        intr.rangeLength = this.state.rangeLength;\n        this.props.socket.sendTo(`ping.${this.props.instance}`, 'ping:settings:browse', intr)\n            .catch(error => console.error(`Cannot ping: ${error}`));\n    }\n\n    async componentWillUnmount() {\n        await this.props.socket.unsubscribeState(`system.adapter.ping.${this.props.instance}.alive`, this.onChangedState);\n        await this.props.socket.unsubscribeState(`ping.${this.props.instance}.browse.*`, this.onChangedState);\n    }\n\n    onChangedState = (id, state) => {\n        if (id.endsWith('.alive')) {\n            const alive = state ? state.val : false;\n            if (alive !== this.state.alive) {\n                this.setState({alive});\n            }\n        } else if (id.endsWith('.progress')) {\n            const progress = state ? state.val : 0;\n            if (progress !== this.state.progress) {\n                this.setState({ progress });\n            }\n        } else if (id.endsWith('.running')) {\n            const running = !!state?.val;\n            if (running !== this.state.running) {\n                this.setState({ running });\n            }\n        } else if (id.endsWith('.result')) {\n            const ips = state?.val || '[]';\n            if (ips !== JSON.stringify(this.state.ips)) {\n                this.setState({ ips: JSON.parse(ips) });\n            }\n        } else if (id.endsWith('.status')) {\n            const status = state?.val || '';\n            if (status !== this.state.status) {\n                this.setState({ status });\n            }\n        } else if (id.endsWith('.rangeStart')) {\n            const rangeStart = state?.val || '';\n            if (rangeStart !== this.state.rangeStart) {\n                this.setState({ rangeStart });\n            }\n        } else if (id.endsWith('.rangeLength')) {\n            const rangeLength = state?.val || '';\n            if (rangeLength !== this.state.rangeLength) {\n                this.setState({ rangeLength });\n            }\n        } else if (id.endsWith('.interface')) {\n            const iface = state?.val || '';\n            if (iface &&\n                iface !== this.state.interface &&\n                this.state.interfaces.find(item => item.ip === iface)\n            ) {\n                this.setState({ interface: iface });\n            }\n        }\n    };\n\n    renderItem() {\n        if (!this.state.interfaces) {\n            return <LinearProgress/>;\n        }\n\n        const exists = this.props.data.devices || [];\n        const selectable = this.state.ips.filter(it => !exists.find(item => item.ip === it.ip));\n        const allSelected = selectable.length === this.state.selected.length;\n        const iface = this.state.interfaces.find(item => item.ip === this.state.interface);\n        let len = 0;\n        if (iface) {\n            len = netMask2Count(iface.netmask);\n        }\n\n        const button = <Button\n            style={{ marginLeft: len > 256 ? 0 : 16, whiteSpace: 'nowrap', width: 250 }}\n            variant=\"contained\"\n            disabled={!this.state.alive || !this.state.interface}\n            onClick={() => {\n                if (this.state.running) {\n                    this.props.socket.setState(`ping.${this.props.instance}.browse.running`, false);\n                } else {\n                    this.browse();\n                }\n            }}\n            startIcon={<Search />}\n        >\n            <span style={{ marginLeft: 8 }}>{this.state.running ? `${this.state.status} ${I18n.t('custom_ping_stop')}` : I18n.t('custom_ping_browse')}</span>\n        </Button>;\n\n        return <div style={{ width: '100%'}} className=\"ping_custom\">\n            <h4>{I18n.t('custom_ping_title')}</h4>\n            <div style={{ width: '100%', display: 'flex', alignItems: 'center' }}>\n                <FormControl style={{ width: '100%', maxWidth: 600 }} variant=\"standard\">\n                    <InputLabel>{I18n.t('custom_ping_interface')}</InputLabel>\n                    <Select\n                        variant=\"standard\"\n                        disabled={this.state.running}\n                        value={this.state.interface}\n                        onChange={e => {\n                            let rangeStart = '';\n                            let rangeLength = '';\n                            const _iface = this.state.interfaces.find(item => item.ip === e.target.value);\n                            if (_iface && netMask2Count(_iface.netmask) > 256) {\n                                // generate new ranges\n                                const parts = _iface.ip.split('.');\n                                parts[3] = '1';\n                                rangeStart = parts.join('.');\n                                rangeLength = 254;\n                            }\n                            this.setState({ interface: e.target.value, rangeStart, rangeLength }, async () => {\n                                await this.props.socket.setState(`ping.${this.props.instance}.browse.interface`, this.state.interface);\n                                await this.props.socket.setState(`ping.${this.props.instance}.browse.rangeStart`, this.state.rangeStart);\n                                await this.props.socket.setState(`ping.${this.props.instance}.browse.rangeLength`, this.state.rangeLength);\n                            });\n                        }}\n                    >\n                        <MenuItem value=\"\">\n                            <em>{I18n.t('custom_ping_select_interface')}</em>\n                        </MenuItem>\n                        {this.state.interfaces.map(item => {\n                            const len = netMask2Count(item.netmask);\n                            return <MenuItem\n                                key={item.ip}\n                                value={item.ip}\n                            >\n                                {`${item.name} - ${item.ip} (${len} ${I18n.t('custom_ping_ips')})`}\n                            </MenuItem>;\n                        })}\n                    </Select>\n                </FormControl>\n                {len > 256 ? <TextField\n                    variant=\"standard\"\n                    style={{ marginLeft: 8, width: 300 }}\n                    label={I18n.t('custom_ping_range_begin')}\n                    value={this.state.rangeStart}\n                    onChange={e => {\n                        this.setState({ rangeStart: e.target.value }, async () => {\n                            await this.props.socket.setState(`ping.${this.props.instance}.browse.rangeStart`, this.state.rangeStart);\n                        });\n                    }}\n                    disabled={this.state.running}\n                /> : null}\n                {len > 256 ? <TextField\n                    variant=\"standard\"\n                    style={{ marginLeft: 8, width: 150 }}\n                    label={I18n.t('custom_ping_range_length')}\n                    value={this.state.rangeLength}\n                    onChange={e => {\n                        this.setState({ rangeLength: e.target.value }, async () => {\n                            await this.props.socket.setState(`ping.${this.props.instance}.browse.rangeLength`, this.state.rangeLength);\n                        });\n                    }}\n                    type=\"number\"\n                    slotProps={{ htmlInput: { min: 1, max: 254 } }}\n                    disabled={this.state.running}\n                /> : null}\n                {len <= 256 ? button : null}\n            </div>\n            {len > 256 ? <div style={{ width: '100%', marginTop: 10 }}>\n                {button}\n            </div> : null}\n            {this.state.running ? <LinearProgress\n                value={this.state.progress / 255 * 100}\n                variant=\"determinate\"\n                style={{ marginTop: 10 }}\n            /> : <div style={{ height: 4, marginTop: 10 }} />}\n            <Button\n                variant=\"contained\"\n                style={{ marginTop: 10, marginBottom: 10 }}\n                disabled={!this.state.selected.length}\n                onClick={() => {\n                    const devices = [...this.props.data.devices];\n                    this.state.selected.forEach(ip => {\n                        if (!devices.find(item => item.ip === ip)) {\n                            devices.push({ ip, name: ip });\n                        }\n                    });\n                    const data = JSON.parse(JSON.stringify(this.props.data));\n                    data.devices = devices;\n                    devices.sort((a, b) => a.ip > b.ip ? 1 : (a.ip < b.ip ? -1 : 0));\n                    this.props.onChange(data);\n                    this.setState({ selected: [] });\n                }}\n            >\n                {I18n.t('custom_ping_add')}\n            </Button>\n            <TableContainer component={Paper} style={{ width: '100%' }}>\n                <Table style={{ width: '100%' }} size=\"small\">\n                    <TableHead>\n                        <TableRow style={{ background: this.props.themeType === 'dark' ? '#333' : '#DDD' }}>\n                            <TableCell style={{ height: 55 }}>\n                                {selectable.length ? <Checkbox\n                                    title={I18n.t('custom_ping_select_all')}\n                                    disabled={!selectable.length}\n                                    indeterminate={!allSelected && this.state.selected.length}\n                                    checked={allSelected}\n                                    onClick={() => {\n                                        if (!allSelected) {\n                                            this.setState({ selected: selectable });\n                                        } else {\n                                            this.setState({ selected: [] });\n                                        }\n                                    }}\n                                /> : null}\n                            </TableCell>\n                            <TableCell\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-between',\n                                    alignItems: 'center',\n                                    height: 55,\n                                }}\n                            >\n                                {I18n.t('custom_ping_ip')}\n                            </TableCell>\n                            <TableCell>{I18n.t('custom_ping_mac')}</TableCell>\n                            <TableCell>{I18n.t('custom_ping_vendor')}</TableCell>\n                            <TableCell>{I18n.t('custom_ping_ignore')}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.ips.map(item => <TableRow\n                            key={item.ip}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                            <TableCell component=\"th\" scope=\"row\">\n                                {!exists.find(it => it.ip === item.ip) ? <Checkbox\n                                    checked={this.state.selected.includes(item.ip)}\n                                    style={{ padding: '0 8px' }}\n                                    onChange={() => {\n                                        const selected = this.state.selected;\n                                        const pos = selected.indexOf(item.ip);\n                                        if (pos === -1) {\n                                            selected.push(item.ip);\n                                        } else {\n                                            selected.splice(pos, 1);\n                                        }\n                                        this.setState({ selected });\n                                    }}\n                                /> : null}\n                            </TableCell>\n                            <TableCell>{item.ip}</TableCell>\n                            <TableCell>{item.mac}</TableCell>\n                            <TableCell>{item.vendor}</TableCell>\n                            <TableCell>\n                                {!exists.find(it => it.ip === item.ip) ? <Checkbox\n                                    checked={item.ignore}\n                                    style={{ padding: '0 8px' }}\n                                    onChange={() => {\n                                        const ips = [...this.state.ips];\n                                        const editedItem = ips.find(it => it.ip === item.ip);\n                                        if (editedItem) {\n                                            editedItem.ignore = !editedItem.ignore;\n                                            this.setState({ ips }, () =>\n                                                this.props.socket.setState(`ping.${this.props.instance}.browse.result`, JSON.stringify(ips), false));\n                                        }\n                                    }}\n                                /> : null}\n                            </TableCell>\n                        </TableRow>)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>;\n    }\n}\n\nPingBrowseComponent.propTypes = {\n    socket: PropTypes.object.isRequired,\n    themeType: PropTypes.string,\n    themeName: PropTypes.string,\n    style: PropTypes.object,\n    data: PropTypes.object.isRequired,\n    attr: PropTypes.string,\n    schema: PropTypes.object,\n    onError: PropTypes.func,\n    onChange: PropTypes.func,\n};\n\nexport default PingBrowseComponent;\n","import PingBrowseComponent from './PingBrowseComponent';\n\nexport default { PingBrowseComponent };\n"],"names":["netMask2Count","netmask","numbers","i","numOfOnes","PingBrowseComponent","props","id","state","alive","progress","running","ips","status","rangeStart","rangeLength","iface","item","interfaces","config","host","addr","newState","ifaceLast","browse","result","ip","intr","error","exists","selectable","it","allSelected","len","button","_iface","parts","devices","data","a","b","selected","pos","editedItem"],"sourceRoot":""}