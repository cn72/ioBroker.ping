{"version":3,"file":"static/js/src_Components_jsx.3083271f.chunk.js","mappings":"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","sources":["PingBrowseComponent.jsx","Components.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    LinearProgress, Table, TableBody,\r\n    TableCell, TableContainer, TableHead,\r\n    TableRow, Paper, Checkbox,\r\n    FormControl, InputLabel, Select, MenuItem,\r\n    Button, CircularProgress,\r\n} from '@mui/material';\r\nimport { I18n } from '@iobroker/adapter-react-v5';\r\nimport { ConfigGeneric } from '@iobroker/json-config';\r\n\r\nconst countCharOccurrences = (string , char) => string.split(char).length - 1;\r\n\r\nconst decimalToBinary = dec => (dec >>> 0).toString(2);\r\nconst getNetMaskParts = nmask => nmask.split('.').map(Number);\r\nconst netmask2CIDR = netmask => countCharOccurrences(getNetMaskParts(netmask)\r\n    .map(part => decimalToBinary(part))\r\n    .join(''),\r\n'1'\r\n);\r\n\r\nfunction netMask2Count(netmask) {\r\n     // Calculate the number of available IP addresses\r\n    const numbers = netmask.split('.').map(i => parseInt(i, 10).toString(2));\r\n    if (numbers.length !== 4) {\r\n        return 0;\r\n    }\r\n    const numOfOnes = numbers.join('').split('1').length - 1;\r\n\r\n    return Math.pow(2, 32 - numOfOnes);\r\n}\r\n\r\nclass PingBrowseComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alive: false,\r\n            progress: 0,\r\n            interface: '',\r\n            interfaces: [],\r\n            selected: [],\r\n            ips: [],\r\n            running: false,\r\n            status: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await super.componentDidMount();\r\n        const newState = {};\r\n\r\n        const state = await this.props.socket.getState(`system.adapter.ping.${this.props.instance}.alive`);\r\n        newState.alive = !!state?.val;\r\n\r\n        const progress = await this.props.socket.getState(`ping.${this.props.instance}.browse.progress`);\r\n        const browse = await this.props.socket.getState(`ping.${this.props.instance}.browse.running`);\r\n        const result = await this.props.socket.getState(`ping.${this.props.instance}.browse.result`);\r\n        const status = await this.props.socket.getState(`ping.${this.props.instance}.browse.status`);\r\n        newState.status = status?.val || '';\r\n        newState.progress = progress?.val || 0;\r\n        newState.running = !!browse?.val;\r\n        try {\r\n            newState.ips = JSON.parse(result?.val) || [];\r\n        } catch {\r\n            newState.ips = [];\r\n        }\r\n\r\n        await this.props.socket.subscribeState(`system.adapter.ping.${this.props.instance}.alive`, this.onChangedState);\r\n        await this.props.socket.subscribeState(`ping.${this.props.instance}.browse.*`, this.onChangedState);\r\n        // read config of ping adapter\r\n        const config = await this.props.socket.getObject(`system.adapter.ping.${this.props.instance}`);\r\n        const host = await this.props.socket.getObject(`system.host.${config.common.host}`);\r\n        if (host?.native?.hardware?.networkInterfaces) {\r\n            const interfaces = [];\r\n            Object.keys(host.native.hardware.networkInterfaces).forEach(iface => {\r\n                const ifc = host.native.hardware.networkInterfaces[iface];\r\n                ifc.forEach(addr => {\r\n                    if (addr.family === 'IPv4' && !addr.internal) {\r\n                        interfaces.push({\r\n                            name: iface,\r\n                            ip: addr.address,\r\n                            netmask: addr.netmask,\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            this.setState({ interfaces });\r\n        }\r\n    }\r\n\r\n    browse() {\r\n        this.props.socket.sendTo(`ping.${this.props.instance}`, 'browse', this.state.interfaces.find(item => item.ip === this.state.interface))\r\n            .then(result => this.setState({ ips: result?.result || [] }));\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.props.socket.unsubscribeState(`system.adapter.ping.${this.props.instance}.alive`, this.onChangedState);\r\n        await this.props.socket.unsubscribeState(`ping.${this.props.instance}.browse.*`, this.onChangedState);\r\n    }\r\n\r\n    onChangedState = (id, state) => {\r\n        if (id.endsWith('.alive')) {\r\n            const alive = state ? state.val : false;\r\n            if (alive !== this.state.alive) {\r\n                this.setState({alive});\r\n            }\r\n        } else if (id.endsWith('.progress')) {\r\n            const progress = state ? state.val : 0;\r\n            if (progress !== this.state.progress) {\r\n                this.setState({ progress });\r\n            }\r\n        } else if (id.endsWith('.running')) {\r\n            const running = !!state?.val;\r\n            if (running !== this.state.running) {\r\n                this.setState({ running });\r\n            }\r\n        } else if (id.endsWith('.result')) {\r\n            const ips = state?.val || '[]';\r\n            if (ips !== JSON.stringify(this.state.ips)) {\r\n                this.setState({ ips: JSON.parse(ips) });\r\n            }\r\n        } else if (id.endsWith('.status')) {\r\n            const status = state?.val || '';\r\n            if (status !== this.state.status) {\r\n                this.setState({ status });\r\n            }\r\n        }\r\n    };\r\n\r\n    renderItem() {\r\n        if (!this.state.interfaces) {\r\n            return <LinearProgress />;\r\n        }\r\n\r\n        const exists = this.props.data.devices || [];\r\n        const selectable = this.state.ips.filter(ip => !exists.find(item => item.ip === ip));\r\n        const allSelected = selectable.length === this.state.selected.length;\r\n\r\n        return <div style={{ width: '100%'}} className=\"ping_custom\">\r\n            <h4>{I18n.t('custom_ping_title')}</h4>\r\n            <div style={{ width: '100%', display: 'flex', alignItems: 'center' }}>\r\n                <FormControl style={{ width: '100%', maxWidth: 600 }} variant=\"standard\">\r\n                    <InputLabel>{I18n.t('custom_ping_interface')}</InputLabel>\r\n                    <Select\r\n                        variant=\"standard\"\r\n                        value={this.state.interface}\r\n                        onChange={e => this.setState({ interface: e.target.value })}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>{I18n.t('custom_ping_select_interface')}</em>\r\n                        </MenuItem>\r\n                        {this.state.interfaces.map(item => {\r\n                            const len = netMask2Count(item.netmask);\r\n                            return <MenuItem\r\n                                disabled={len > 4096}\r\n                                value={item.ip}\r\n                            >\r\n                                {`${item.name} - ${item.ip} (${len} ${I18n.t('custom_ping_ips')})`}\r\n                            </MenuItem>;\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n                <Button\r\n                    style={{ marginLeft: 16, whiteSpace: 'nowrap' }}\r\n                    variant=\"contained\"\r\n                    disabled={!this.state.alive || !this.state.interface}\r\n                    onClick={() => {\r\n                        if (this.state.running) {\r\n                            this.props.socket.setState(`ping.${this.props.instance}.browse.running`, false);\r\n                        } else {\r\n                            this.browse();\r\n                        }\r\n                    }}\r\n                >\r\n                    {this.state.running ? <CircularProgress /> : null}\r\n                    <span style={{ marginLeft: 8 }}>{this.state.running ? `${this.state.status} ${I18n.t('custom_ping_stop')}` : I18n.t('custom_ping_browse')}</span>\r\n                </Button>\r\n            </div>\r\n            {this.state.running ? <LinearProgress\r\n                value={this.state.progress / 255 * 100}\r\n                variant=\"determinate\"\r\n            /> : <div style={{ height: 4 }} />}\r\n            <TableContainer component={Paper} style={{ width: '100%' }}>\r\n                <Table style={{ width: '100%' }} size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow style={{ background: this.props.themeType === 'dark' ? '#333' : '#DDD' }}>\r\n                            <TableCell style={{ height: 55 }}>\r\n                                {selectable.length ? <Checkbox\r\n                                    title={I18n.t('custom_ping_select_all')}\r\n                                    disabled={!this.state.alive || this.state.running}\r\n                                    indeterminate={!allSelected && this.state.selected.length}\r\n                                    checked={allSelected}\r\n                                    onClick={() => {\r\n                                        if (!allSelected) {\r\n                                            this.setState({ selected: selectable });\r\n                                        } else {\r\n                                            this.setState({ selected: [] });\r\n                                        }\r\n                                    }}\r\n                                /> : null}\r\n                            </TableCell>\r\n                            <TableCell\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    height: 55,\r\n                                }}\r\n                            >\r\n                                {I18n.t('custom_ping_ip')}\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    disabled={!this.state.selected.length}\r\n                                    onClick={() => {\r\n                                        const devices = [...this.props.data.devices];\r\n                                        this.state.selected.forEach(ip => {\r\n                                            if (!devices.find(item => item.ip === ip)) {\r\n                                                devices.push({ ip, name: ip });\r\n                                            }\r\n                                        });\r\n                                        const data = JSON.parse(JSON.stringify(this.props.data));\r\n                                        data.devices = devices;\r\n                                        devices.sort((a, b) => a.ip > b.ip ? 1 : (a.ip < b.ip ? -1 : 0));\r\n                                        this.props.onChange(data);\r\n                                        this.setState({ selected: [] });\r\n                                    }}\r\n                                >\r\n                                    {I18n.t('custom_ping_add')}\r\n                                </Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {this.state.ips.map(ip => <TableRow\r\n                            key={ip}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                        >\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {!exists.find(item => item.ip === ip) ? <Checkbox\r\n                                    checked={this.state.selected.includes(ip)}\r\n                                    style={{\r\n                                        padding: '0 8px',\r\n                                    }}\r\n                                    onChange={() => {\r\n                                        const selected = this.state.selected;\r\n                                        const pos = selected.indexOf(ip);\r\n                                        if (pos === -1) {\r\n                                            selected.push(ip);\r\n                                        } else {\r\n                                            selected.splice(pos, 1);\r\n                                        }\r\n                                        this.setState({ selected });\r\n                                    }}\r\n                                /> : null}\r\n                            </TableCell>\r\n                            <TableCell>{ip}</TableCell>\r\n                        </TableRow>)}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>;\r\n    }\r\n}\r\n\r\nPingBrowseComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default PingBrowseComponent;\r\n","import PingBrowseComponent from './PingBrowseComponent';\r\n\r\nexport default { PingBrowseComponent };\r\n"],"names":["countCharOccurrences","string","char","decimalToBinary","dec","getNetMaskParts","nmask","netmask2CIDR","netmask","part","netMask2Count","numbers","numOfOnes","PingBrowseComponent","props","id","state","alive","progress","running","ips","status","newState","browse","result","config","host","interfaces","iface","addr","item","exists","selectable","ip","allSelected","len","devices","data","a","b","selected","pos"],"sourceRoot":""}